generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  BLOCKED
  REMOVED
}

enum MessageContentType {
  TEXT
  EMOJI
  GIF
  IMAGE
  VIDEO
  FILE
  AUDIO
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

enum AuthProvider {
  EMAIL
  GOOGLE
  ANONYMOUS
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  PENDING
  FAILED
}

enum SubscriptionTier {
  FREE
  BASIC
  PREMIUM
}

enum KarmaLevel {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

enum KarmaActionType {
  CHAT_DURATION
  SKIP
  POSITIVE_RATING
  NEGATIVE_RATING
  REPORT
  BLOCK
  DONATION
}

enum CreditTransactionType {
  DAILY_REWARD
  MESSAGE_SPENT
  BONUS_RATING
  BONUS_REFERRAL
  BONUS_LOGIN
  DONATION_SENT
  DONATION_RECEIVED
}

enum ReactionType {
  EMOJI
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}

model User {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  username     String    @unique
  email        String?   @unique
  password     String?
  isAnonymous  Boolean   @default(false)
  isVerified   Boolean   @default(false)
  age          Int?
  gender       Gender
  city         String?
  state        String?
  country      String?
  interests    String[]
  genderPreference Gender?
  online       Boolean   @default(false)
  lastActive   DateTime?
  avatarUrl    String?

  // Authentication
  accounts     Account[]
  sessions     Session[]

  // Relationships
  sentConnections     Connection[]  @relation("Requester")
  receivedConnections Connection[]  @relation("Receiver")
  sentMessages        Message[]     @relation("Sender")
  reactions           Reaction[]
  blockedUsers        BlockedUser[] @relation("BlockedByUser")
  beingBlocked        BlockedUser[] @relation("BlockedUser")
  subscriptions       Subscription[]

  karma         Karma?
  chatCredits   ChatCredits?

  // Conversation relationships
  conversations   Conversation[] @relation("ConversationParticipants")

  @@index([isAnonymous])
  @@index([email])
}

model Account {
  id                String       @id @default(uuid())
  userId            String
  provider          AuthProvider
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  passwordHash      String?

  // Relationships
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relationships
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Connection {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  requester   User             @relation("Requester", fields: [requesterId], references: [id], onDelete: Cascade)
  requesterId String
  receiver    User             @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId  String
  status      ConnectionStatus @default(PENDING)
  messages    Message[]        @relation("ConnectionMessages")

  @@unique([requesterId, receiverId])
  @@index([status])
}

model BlockedUser {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  blockedBy   User     @relation("BlockedByUser", fields: [blockedById], references: [id], onDelete: Cascade)
  blockedById String
  user        User     @relation("BlockedUser", fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@unique([blockedById, userId])
}

model Message {
  id              String       @id @default(uuid())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  content         String
  contentType     MessageContentType @default(TEXT)
  status          MessageStatus @default(SENT)
  isRead          Boolean      @default(false)
  sender          User         @relation("Sender", fields: [senderId], references: [id])
  senderId        String
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId  String
  lastMessageFor  Conversation? @relation("LastMessage")
  connection      Connection   @relation("ConnectionMessages", fields: [connectionId], references: [id])
  connectionId    Int
  reactions       Reaction[]
  metadata        Json?        // For storing GIF data, emoji details etc.

  @@index([senderId])
  @@index([conversationId])
  @@index([createdAt])
  @@index([connectionId])
}

model Reaction {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  type        ReactionType
  emoji       String?      // For custom emoji reactions
  message     Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId   String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@unique([messageId, userId, type])
  @@index([messageId])
  @@index([userId])
}

model Subscription {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userId            String
  tier              SubscriptionTier   @default(FREE)
  status            SubscriptionStatus @default(ACTIVE)
  startDate         DateTime           @default(now())
  endDate           DateTime?
  autoRenew         Boolean            @default(true)
  canceledAt        DateTime?
  paymentMethodId   String?
  lastPaymentDate   DateTime?
  nextPaymentDate   DateTime?
  subscriptionPrice Decimal?           @db.Decimal(10, 2)
  currency          String?            @default("USD")
  
  // Relationships
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments          Payment[]

  @@index([userId])
  @@index([status])
  @@index([tier])
}

model Payment {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  subscriptionId String
  amount         Decimal  @db.Decimal(10, 2)
  currency       String   @default("USD")
  status         String   @default("COMPLETED")
  paymentMethod  String?
  transactionId  String?  @unique
  
  // Relationships
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([status])
}

model Karma {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  level       KarmaLevel   @default(BRONZE)
  points      Int          @default(0)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  history     KarmaHistory[]

  @@unique([userId])
  @@index([level])
}

model KarmaHistory {
  id        String          @id @default(uuid())
  createdAt DateTime        @default(now())
  karmaId   String
  actionType KarmaActionType
  points    Int
  metadata  Json?
  karma     Karma           @relation(fields: [karmaId], references: [id], onDelete: Cascade)

  @@index([karmaId])
  @@index([actionType])
}

model ChatCredits {
  id                    String    @id @default(uuid())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  userId               String
  balance              Int       @default(0)
  lifetimeEarned       Int       @default(0)
  lifetimeSpent        Int       @default(0)
  lastDailyReward      DateTime?
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions         ChatCreditTransaction[]

  @@unique([userId])
}

model ChatCreditTransaction {
  id          String                @id @default(uuid())
  createdAt   DateTime              @default(now())
  creditsId   String
  type        CreditTransactionType
  amount      Int
  metadata    Json?
  credits     ChatCredits           @relation(fields: [creditsId], references: [id], onDelete: Cascade)

  @@index([creditsId])
  @@index([type])
}

model Conversation {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  participants  User[]    @relation("ConversationParticipants")
  messages      Message[]
  lastMessage   Message?  @relation("LastMessage", fields: [lastMessageId], references: [id])
  lastMessageId String?   @unique

  @@index([createdAt])
}
