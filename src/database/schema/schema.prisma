generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  BLOCKED
  REMOVED
}

enum MessageContentType {
  TEXT
  EMOJI
  GIF
  IMAGE
  VIDEO
  FILE
  AUDIO
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

enum AuthProvider {
  EMAIL
  GOOGLE
  ANONYMOUS
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  PENDING
  FAILED
}

enum SubscriptionTier {
  FREE
  BASIC
  PREMIUM
}

model User {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  username     String
  email        String?   @unique
  isAnonymous  Boolean   @default(false)
  isVerified   Boolean   @default(false)
  age          Int?
  gender       Gender    @default(PREFER_NOT_TO_SAY)
  city         String?
  state        String?
  country      String?
  interests    String[]
  online       Boolean   @default(false)
  lastActive   DateTime?
  avatarUrl    String?

  // Authentication
  accounts     Account[]
  sessions     Session[]

  // Relationships
  sentConnections     Connection[]  @relation("Requester")
  receivedConnections Connection[]  @relation("Receiver")
  sentMessages        Message[]     @relation("Sender")
  reactions           Reaction[]
  blockedUsers        BlockedUser[] @relation("BlockedByUser")
  beingBlocked        BlockedUser[] @relation("BlockedUser")
  subscriptions       Subscription[]

  @@index([isAnonymous])
  @@index([email])
}

model Account {
  id                String       @id @default(uuid())
  userId            String
  provider          AuthProvider
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  passwordHash      String?

  // Relationships
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relationships
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Connection {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  requester   User             @relation("Requester", fields: [requesterId], references: [id], onDelete: Cascade)
  requesterId String
  receiver    User             @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId  String
  status      ConnectionStatus @default(PENDING)
  messages    Message[]        @relation("ConnectionMessages")

  @@unique([requesterId, receiverId])
  @@index([status])
}

model BlockedUser {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  blockedBy   User     @relation("BlockedByUser", fields: [blockedById], references: [id], onDelete: Cascade)
  blockedById String
  user        User     @relation("BlockedUser", fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@unique([blockedById, userId])
}

model Message {
  id           Int                @id @default(autoincrement())
  createdAt    DateTime           @default(now())
  connection   Connection         @relation("ConnectionMessages", fields: [connectionId], references: [id], onDelete: Cascade)
  connectionId Int
  sender       User               @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId     String
  content      String
  contentType  MessageContentType
  status       MessageStatus      @default(SENT)
  mediaUrl     String?
  deleted      Boolean            @default(false)
  reactions    Reaction[]

  @@index([connectionId])
  @@index([createdAt])
}

model Reaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  emoji     String
}

model Subscription {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userId            String
  tier              SubscriptionTier   @default(FREE)
  status            SubscriptionStatus @default(ACTIVE)
  startDate         DateTime           @default(now())
  endDate           DateTime?
  autoRenew         Boolean            @default(true)
  canceledAt        DateTime?
  paymentMethodId   String?
  lastPaymentDate   DateTime?
  nextPaymentDate   DateTime?
  subscriptionPrice Decimal?           @db.Decimal(10, 2)
  currency          String?            @default("USD")
  
  // Relationships
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments          Payment[]

  @@index([userId])
  @@index([status])
  @@index([tier])
}

model Payment {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  subscriptionId String
  amount         Decimal  @db.Decimal(10, 2)
  currency       String   @default("USD")
  status         String   @default("COMPLETED")
  paymentMethod  String?
  transactionId  String?  @unique
  
  // Relationships
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([status])
}
